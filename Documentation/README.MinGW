Date:	18-Feb-2005 (tested under Windows XP)
Update: 23-Feb-2003 (also tested under Windows 2000)
Author: Richard Frith-Macdonald <rfm@gnu.org>

PURPOSE
-------

This document is intended to provide a step by step instruction on how
to get the GNUstep base library into a usable state on a recent Windows
operating system (XP, 2000, and probably NT).

MinGW is a collection of header files and import libraries that allow
one to use GCC and produce native Windows32 programs that do not rely
on any 3rd-party DLLs. GNUstep has only partially been ported to MinGW
so expect some problems when trying to compile. Also, there are still
subtle problems with running GNU tools on Windows, so any problems you
may encounter may just as easly have to do with the compilation tools
you are using as with GNUstep.

MSYS is a very much cut down version of the Cygwin environment ...
providing a minimal set of tools needed to build programs using MingGW.
If you wish to build for MinGW by cross-compiling from a Cygwin
environment, please read README.Cygwin instead.

The gui library is only partially ported to run under MinGW. The look
and behavior may not be consistant.

PRELIMINARIES
-------------

One way to vastly simplify installing GNUstep, is to use the Windows-based
GNUstep installer. Currently, this installer only installs the non-gui
portion of GNUstep. Get it from

http://www.gnustep.org/resources/sources.html#windows

If you have already installed this, you can skip to the section
'Additional gui libraries '. Although you may want to read the rest of
the instructions for other helpful information.


Installing and setting up MINGW and MSYS
----------------------------------------

Download MSYS-1.0.10 or later from
http://sourceforge.net/projects/mingw
and install it (provides a shell to work from).

Download msysDTK-1.0.1 or later from
http://sourceforge.net/projects/mingw
and install it (provides cvs and ssh etc).

Download MinGW-3.1.0-1 or later from
http://sourceforge.net/projects/mingw
and install it (provides compiler, headers, libraries etc).

If you didn't install mingw within the msys
installation, then after installing mingw, create a file called fstab in
c:/msys/<version-number>/etc, or wherever you installed msys, and make
sure it contains the line
c:/mingw /mingw
which also should be changed accordingly if you installed MinGW
somewhere else.

Download the most recent MinGW runtime (unless you got MinGW-3.2 or later)
and untar it into the same location you installed MinGW in.  This is needed
because earliet versions of the runtime had a critical bug in unicode
filesystem support.

Next

You may need to edit /mingw/include/winsock2.h to change the size of the
sa_data field in the sockaddr structure from 14 to 22 ... this is because
some versions of Windows have changed the layout of this structure.
This modification may be needed to be able to correctly determine the
network interface details for your machine.

It's a good idea to remove the libobjc.a and include/objc header that come
with gcc (gcc -v for location) so that they are not accidentally found
instead of the libobjc DLL that you will compile below.

Now you can open a window containg a shell by choosing MSYS from the
start menu.

At this point you may want to set the HOMEDRIVE and HOMEPATH environment
variables to point to the home directory you wish to work from (though
the defaults may be ok for you).
NB. This home directory for building software must *not* contain spaces.
(aside - MSYS uses the UNIX-style HOME environment variable, but Windows
programs, including GNUstep programs under Windows, use the HOMEDRIVE and
HOMEPATH environment variables to build a windows-style path for the home
directory.  eg. if HOMEDRIVE is C: and HOMEPATH is \MyHome then the path
to the home directory is C:\MyHome).

From this window we can now start building things.

IMPORTANT NOTE
The msys make program sometimes crashes and core-dumps (usually while
installing software).  If this happens, repeat the make command a few
times until it works ... the crash in make is not reliably repeatable
which means that a retry will usually work.
NB. I have not experienced this crash with the MSYS version listed above,
so it may have been fixed.


Obtaining GNUstep
-----------------

The main GNUstep project pages tell you how to get hold of this. You can get
the latest release of the following libraries. However, since MinGW support
is currently evolving, we recommend that you get the latest snapshot
or code from CVS.

You need things in the following order:

GNUstep-make (release, snapshot, or cvs core module)
libffcall (http://ftp.gnustep.org/pub/gnustep/lib)
GNUstep-objc (release, snapshot, or cvs dev-libs module)
GNUstep-base (snapshot, or cvs core module)

For gui, GNUstep-gui and GNUstep-back (snapshot, or cvs core module)

Setting up the GNUstep make environment
---------------------------------------

In the GNUstep-make (core/make) package, do './configure
--prefix=/C/GNUstep' You can of course use a different prefix to
install the GNUstep system in an alternative location.
The leading '/C' is the MSYS way of specifying that the 'C' drive is
to be used.  Older versions of the tools required a windows style
path (eg. C:/GNUstep), but using the MSYS style path is important as
it will avoid problems later!

Note: There was a comment that '--prefix=/C/GNUstep' did not work
with a bash shell as it got converted to C:\GNUstep (which is bad because 
the shell treats a \G as something entirely different. If you have this
problem, try '--prefix=C:/GNUstep' (It's probably better to use the
native Msys shell though).

Now you can type 'make install' to build and install the make package.

Once this is done, type '. GNUstep.sh' to set up your GNUstep
environment.  The environment for building software is now completely
set up, but for ease of use later, you might set up a script to be
used to set up any new shell windows you create.  Something like this
in your ~/.profile would do nicely:

export HOMEDRIVE=C:
export HOMEPATH=/home/myname
export HOME=/C/home/myname
export GNUSTEP_SYSTEM_ROOT=/C/GNUstep/System
. $GNUSTEP_SYSTEM_ROOT/Library/Makefiles/GNUstep.sh

NOTE: Sometimes the HOME variable may already be set by Windows to be
%USERPROFILE% (which is the Windows variable that contains the path of
your home folder). MSYS has problems with that as it doesn't recognise
that %USERPROFILE% is a variable name. Be sure to check that if you run
into errors.
     
     MinGW comes with a buggy 'ln -s' and Makefiles are no longer
     installed into $GNUSTEP_SYSTEM_ROOT/Makefiles so there is 
     no compatibility symlink to $GNUSTEP_SYSTEM_ROOT/Library/Makefiles



Building and installing libobjc
-------------------------------

Despite the statement in the GNUstep-HOWTO, even if you have a 3.x
compiler, you still need to install gnustep-objc as it properly
exports symbols for DLLs.

Go to gnustep-objc (or from CVS, into dev-libs/libobjc), and type

  make install

This should build and install the ObjectiveC runtime and headers for you.



Building and installing FFCALL
------------------------------

The next priority is to get the ffcall library built and installed.
You should get the latest ffcall archive from
http://ftp.gnustep.org/pub/gnustep/libs. 

Ignore any other instructions for building this ...

First, in the shell window in which you have set up your GNUstep
environment, type

./configure --prefix=$GNUSTEP_SYSTEM_ROOT \
 --libdir=$GNUSTEP_SYSTEM_ROOT/Library/Libraries \
 --includedir=$GNUSTEP_SYSTEM_ROOT/Library/Headers

Now you can now build and install it simply by typing:

  make
  make install



Additional non-gui libraries
--------------------

There are some optional (but very strongly recommended) libraries you
can install to make GNUstep work better.  For full multilingual support
you need libiconv, and for gui applications you need libtiff, libjpeg,
and zlib.

libiconv
  Needed for multilingual character support (unicode etc)

  Get the binary package from
  http://www.zlatkovic.com/projects/libxml/index.html
  Unpack this and
    cp include/iconv.h $GNUSTEP_SYSTEM_ROOT/Library/Headers
    cp lib/iconv.lib $GNUSTEP_SYSTEM_ROOT/Library/Libraries/libiconv.a
    cp lib/iconv.dll $GNUSTEP_SYSTEM_ROOT/Tools/iconv.dll


zlib
  Get the binary packages from -
  http://prdownloads.sourceforge.net/gnuwin32/zlib-1.2.1-lib.zip
  http://prdownloads.sourceforge.net/gnuwin32/zlib-1.2.1-bin.zip
  
  Unpack the lib package and
    cp include/zlib.h include/zconf.h  $GNUSTEP_SYSTEM_ROOT/Library/Headers
    cp lib/libz.lib   $GNUSTEP_SYSTEM_ROOT/Library/Libraries/libz.a
  Unpack the bin package and
    cp bin/zlib1.dll  $GNUSTEP_SYSTEM_ROOT/Tools
 

The following are libraries which are not currently used, but which will
be required at some point in the future -

libxml2
  Needed for MacOS-X style property list parsing and for autogsdoc.
  Get the binary package from -
  http://www.zlatkovic.com/projects/libxml/index.html

  Unpack this and
    cp -r include/libxml2/libxml  $GNUSTEP_SYSTEM_ROOT/Library/Headers
    cp lib/libzml2.lib   $GNUSTEP_SYSTEM_ROOT/Library/Libraries/libxml2.a
  Unpack the bin package and
    cp bin/libxml2.dll  $GNUSTEP_SYSTEM_ROOT/Tools
    cp bin/xml2-config  $GNUSTEP_SYSTEM_ROOT/Tools

openssl
  Needed for the SSL bundle, providing HTTPS support for NSURL.
  NB. at the time of writing, SSL support in GNUstep base has *not*
  been ported to Windows - but when it is, you will need this package.
  Get the binary package from
  http://www.kix.or.jp/~fujino/openssl
  Unpack this and
    tar -cf - openssl | (cd $GNUSTEP_SYSTEM_ROOT/Library/Headers; tar -xvf -)
    cp *.lib $GNUSTEP_SYSTEM_ROOT/Library/Libraries
    cp *.dll *.exe $GNUSTEP_SYSTEM_ROOT/Tools



Building and installing GNUstep-base
------------------------------------

Go to gnustep-base (or from CVS into the core/base directory), and type

  configure --disable-xml
  make install

This should configure the base library for you, build it
and some tools, and install the whole lot (along with some
system resources).

I have read a report that libxml2 can be made to work, but my attempts have
failed at runtime with windows saying it can't find symbols in the dll :-(


Additional gui libraries
--------------------

These are additional libraries required or at least highly recommended when 
installing the gui portion of GNUstep.


libtiff, libjpeg, libpng
  Needed for image handling support in the GNUstep gui libary
  (not required for GNUstep-base)

  Get these binary packages (or later versions) from -
  http://prdownloads.sourceforge.net/gnuwin32/tiff-3.5.7-lib.zip
  http://prdownloads.sourceforge.net/gnuwin32/tiff-3.5.7-bin.zip
  http://prdownloads.sourceforge.net/gnuwin32/libjpeg-6b-lib.zip
  http://prdownloads.sourceforge.net/gnuwin32/libjpeg-6b-bin.zip
  
  Unpack and install. You can put them in the standard locations, or also:
  the header (.h) files in $GNUSTEP_SYSTEM_ROOT/Library/Headers
  the library (.lib) files in $GNUSTEP_SYSTEM_ROOT/Library/Libraries
  the dll files in $GNUSTEP_SYSTEM_ROOT/Tools

Building and installing GNUstep-gui
-----------------------------------

Go to gnustep-gui (or from CVS into the core/gui directory), and type

  make install



Building and installing GNUstep-back
------------------------------------

This software is ALPHA ... please help porting the GNUstep backend to
Windows!

In the back directory, type

  make install



Troubleshooting
---------------

Issues with updating:
Before attempting to update your GNUstep installation, be sure to stop/kill
all running GNUstep programs or services (i.e. gdomap, gdnc, gpbs) since
Windows cannot overwrite files that are currently in use.



Good Sites for Pre-Compiled Binaries
------------------------------------

Many libraries, etc from:

<http://gnuwin32.sf.net> (libtiff, libxml2)

MingW guile from

<http://www.textsure.net/~ela/devel.html>.

also need guile from

<http://sourceforge.net/project/showfiles.php?group_id=7382>

for guile-config file.
